{
  "name": "sen-helper",
  "displayName": "Sen Helper",
  "description": "Integrates Sen into VScode",
  "publisher": "KingPea",
  "icon": "icon.png",
  "license": "MIT",
  "version": "1.0.1",
  "engines": {
    "vscode": "^1.98.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Zidan1146/sen-helper"
  },
  "keywords": [
    "sen",
    "pvz2",
    "modding",
    "integration"
  ],
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "sen-helper.scg.decodeAdvanced",
        "title": "Sen: Unpack SCG (For Modding)",
        "enablement": "isSenExists"
      },
      {
        "command": "sen-helper.scg.encodeAdvanced",
        "title": "Sen: Pack SCG (For Modding)",
        "enablement": "isSenExists"
      },
      {
        "command": "sen-helper.scg.decodeSimple",
        "title": "Sen: Unpack SCG (Simple)",
        "enablement": "isSenExists"
      },
      {
        "command": "sen-helper.scg.encodeSimple",
        "title": "Sen: Pack SCG (Simple)",
        "enablement": "isSenExists"
      },
      {
        "command": "sen-helper.extension.openGUI",
        "title": "Sen: Open GUI",
        "enablement": "isSenExists"
      },
      {
        "command": "sen-helper.animation.pamToFlash",
        "title": "Sen: Pam to Flash (xfl)",
        "enablement": "isSenExists"
      },
      {
        "command": "sen-helper.animation.flashToPam",
        "title": "Sen: Flash (xfl) to Pam",
        "enablement": "isSenExists"
      },
      {
        "command": "sen-helper.animation.pamToJson",
        "title": "Sen: Pam to JSON",
        "enablement": "isSenExists"
      },
      {
        "command": "sen-helper.animation.jsonToPam",
        "title": "Sen: JSON to Pam",
        "enablement": "isSenExists"
      },
      {
        "command": "sen-helper.json.rtonToJson",
        "title": "Sen: RTON to JSON",
        "enablement": "isSenExists"
      },
      {
        "command": "sen-helper.json.jsonToRton",
        "title": "Sen: JSON to RTON",
        "enablement": "isSenExists"
      },
      {
        "command": "sen-helper.obb.unpackOBB",
        "title": "Sen: Unpack OBB",
        "enablement": "isSenExists"
      },
      {
        "command": "sen-helper.obb.packOBB",
        "title": "Sen: Pack OBB",
        "enablement": "isSenExists"
      },
      {
        "command": "sen-helper.extension.senSenPath",
        "title": "Sen: Set Sen Directory"
      },
      {
        "command": "sen-helper.extension.openSenFolder",
        "title": "Sen: Open Sen Directory",
        "enablement": "isSenExists"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "when": "resourceExtname =~ /\\.scg$/i",
          "command": "sen-helper.scg.decodeAdvanced",
          "group": "sen-helper@1"
        },
        {
          "when": "resourceExtname =~ /\\.package$/i",
          "command": "sen-helper.scg.encodeAdvanced",
          "group": "sen-helper@1"
        },
        {
          "when": "resourceExtname =~ /\\.scg$/i",
          "command": "sen-helper.scg.decodeSimple",
          "group": "sen-helper@2"
        },
        {
          "when": "resourceExtname =~ /\\.package$/i",
          "command": "sen-helper.scg.encodeSimple",
          "group": "sen-helper@2"
        },
        {
          "when": "resourceExtname =~ /\\.obb$/i || resourceExtname =~ /\\.rsb$/i",
          "command": "sen-helper.obb.unpackOBB",
          "group": "sen-helper@2"
        },
        {
          "when": "resourceExtname =~ /\\.bundle$/i",
          "command": "sen-helper.obb.packOBB",
          "group": "sen-helper@2"
        },
        {
          "when": "resourceExtname =~ /\\.pam$/i",
          "command": "sen-helper.animation.pamToFlash",
          "group": "sen-helper@1"
        },
        {
          "when": "resourceExtname =~ /\\.pam$/i",
          "command": "sen-helper.animation.pamToJson",
          "group": "sen-helper@2"
        },
        {
          "when": "resourceExtname =~ /\\.xfl$/i",
          "command": "sen-helper.animation.flashToPam",
          "group": "sen-helper@1"
        },
        {
          "when": "resourceFilename =~ /\\.pam\\.json$/i",
          "command": "sen-helper.animation.jsonToPam",
          "group": "sen-helper@1"
        },
        {
          "when": "resourceFilename =~ /\\.rton$/i",
          "command": "sen-helper.json.rtonToJson",
          "group": "sen-helper@1"
        },
        {
          "when": "resourceFilename =~ /\\.json$/i",
          "command": "sen-helper.json.jsonToRton",
          "group": "sen-helper@1"
        }
      ]
    },
    "walkthroughs": [
      {
        "id": "getstarted",
        "title": "Get Started with Sen Helper",
        "description": "Quick walkthrough on how to use Sen Helper",
        "steps": [
          {
            "id": "installSen",
            "title": "Installing Sen",
            "description": "Sen Helper calls Sen under the hood in order to function, install [here](https://harumazzz.github.io/Sen.Environment/download) if you haven't already.",
            "media": {
              "image": "media/InstallSen.gif",
              "altText": "Installing sen on windows."
            }
          },
          {
            "id": "setPath",
            "title": "Set Sen directory path",
            "description": "Providing sen directory path will grant this extension direct access to sen's core function.\n[Set Sen directory path](command:sen-helper.extension.senSenPath).",
            "media": {
              "image": "media/SetSenPath.gif",
              "altText": "Setting path with \"Sen: Set Sen Directory\" command"
            },
            "completionEvents": [
              "onSettingChanged:senPath"
            ]
          },
          {
            "id": "demoSingle",
            "title": "How to use: Single file",
            "description": "Simple right click for quick processing, intended to work with only 1 single file/folder.",
            "media": {
              "image": "media/DemoSingle.gif",
              "altText": "Sen Helper demo for a single file processing."
            }
          },
          {
            "id": "demoMultiple",
            "title": "How to use: Multi file",
            "description": "Click ``F1`` or ``Ctrl+Shift+P`` to open command pallete and run command that'll process multiple files at once.\nHold ``Shift`` or ``Ctrl`` for choosing many files.",
            "media": {
              "image": "media/DemoMultiple.gif",
              "altText": "Sen Helper demo for a multiple file processing."
            }
          }
        ]
      }
    ],
    "configuration": [
      {
        "title": "Paths",
        "order": 0,
        "properties": {
          "sen-helper.senPath": {
            "title": "Sen Path",
            "type": "string",
            "default": "",
            "markdownDescription": "Path to Sen folder. Install sen [here](https://harumazzz.github.io/Sen.Environment/download)."
          },
          "sen-helper.suiPath": {
            "title": "SUI Path",
            "type": "string",
            "default": "${sen-helper.senPath}\\SenGui\\modding.exe",
            "markdownDescription": "Path to SUI folder. The value of ```${sen-helper.senPath}``` is based of `#sen-helper.senPath#` Value."
          }
        }
      },
      {
        "title": "Command Configurations",
        "order": 1,
        "properties": {
          "sen-helper.configScgForModding": {
            "title": "SCG unpacking configuration",
            "type": "string",
            "enum": [
              "AlwaysAsk",
              "AlwaysSplit",
              "NeverSplit"
            ],
            "enumDescriptions": [
              "Manually decide whether or not SCG files should be unpacked with split label.",
              "SCG files will always be unpacked with split label.",
              "SCG will not be unpacked with split label."
            ],
            "default": "AlwaysAsk",
            "description": "Decide whether or not Sen must split label when unpacking SCG with \"For Modding\" Option."
          },
          "sen-helper.configPamToFlash": {
            "title": "PAM to Flash configuration",
            "type": "string",
            "enum": [
              "AlwaysAsk",
              "AlwaysSplit",
              "NeverSplit"
            ],
            "enumDescriptions": [
              "Manually decide whether or not PAM files should be converted with split label.",
              "PAM files will always be converted with split label.",
              "PAM will not be converted with split label."
            ],
            "default": "AlwaysAsk",
            "description": "Decide how Sen Helper should split label when converting xfl to PAM."
          },
          "sen-helper.configFlashToPam": {
            "title": "Flash to PAM configuration",
            "type": "string",
            "enum": [
              "Automatic",
              "AlwaysAsk"
            ],
            "enumDescriptions": [
              "Sen Helper will search for \"label\" folder to decide whether or not the resulting PAM should include split label.",
              "Manually decide whether or not the resulting PAM should include split label."
            ],
            "default": "Automatic",
            "description": "Decide how Sen Helper should split label when converting xfl to PAM."
          },
          "sen-helper.configOBBFunction": {
            "title": "OBB function configurations",
            "type": "string",
            "enum": [
              "AlwaysAsk",
              "AlwaysAndroid",
              "AlwaysIOS",
              "AlwaysAndroidChina"
            ],
            "enumDescriptions": [
              "Manually decide which texture category that'll be used independently.",
              "Processed OBB/RSBs will always use \"Android\" texture category.",
              "Processed OBB/RSBs will always use \"IOS\" texture category.",
              "Processed OBB/RSBs will always use \"Android China\" texture category."
            ],
            "default": "AlwaysAsk",
            "description": "Decide which texture category Sen Helper use when unpack or packing OBB/RSBs"
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/callsite": "^1.0.34",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.98.0",
    "@types/xxhashjs": "^0.2.4",
    "@typescript-eslint/eslint-plugin": "^8.17.0",
    "@typescript-eslint/parser": "^8.17.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "esbuild": "^0.25.2",
    "eslint": "^9.16.0",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.7.2"
  },
  "dependencies": {
    "lodash": "^4.17.21",
    "winston": "^3.17.0",
    "xxhashjs": "^0.2.2"
  }
}
